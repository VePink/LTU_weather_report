import plotly.graph_objects as go
import pandas as pd
import plotly.express as px

def get_weather_data():
    df_weather = pd.read_csv(
        'C:/Users/Ve/Documents/GitHub/eismoinfo-weather/LOGS/'+"EIW_"+ date.replace("-", "") +'.csv', index_col=None, header=0)
    df_stations = pd.read_csv(
        'C:/Users/Ve/Documents/GitHub/eismoinfo-weather/stations.csv', index_col=None, header=0)
    df_stations = df_stations[['station_UID', 'station_name', 'lat_LKS94', 'long_LKS94']]
    df = df_weather.merge(df_stations, on='station_UID') #join table of weather data and static table with station locations
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df.set_index('timestamp')
    df = df[(df['timestamp'] > date +" "+ start_time) & (df['timestamp']< date +" "+ end_time)]
    return df




def create_Lithuania_border_GO():
    #Add polygon of Lithuanian Republic as series of vertices.
    LTU_broder = go.Scatter(name = 'Lithuania border',
                            x=[686663.8071999997,686663.8071999997,297644.5641000001,297644.5641000001,686663.8071999997,554670.0181999998,552501.4830999998,553163.0826000003,550876.7478999998,549782.25,547876.75,543330,542622.0625,538835.75,538552.5,535676.71,535876.6875,528151.3820000002,524284.25,522159.67140000034,521010.5,517685,517964.8437999999,512454.625,510956.8437999999,507537.625,506061.5,502849.0625,503047.7812999999,501400.25,501171.1875,487858.1562999999,486481.5521999998,485577.75,486439.27699999977,485469.61849999987,477139.0700000003,471856.9808,465319,462196.3125,457164.375,455691,448742.25,449549.50850000046,443883.3125,442500.2187999999,440935.4375,439821.5,438416.03359999973,436389.78000000026,434613.75,433843.5437000003,432034.3125,428241,421545,418411.125,414537.375,403097.5,398036.5,395798.5,391393.75,389541.75,386829.4305999996,384669,379603.9375,377845.375,376073,374826,368568.0312999999,366298.75,359251.625,351750.25,349129.9978,347365.375,345222.75,342107.375,334370.125,331072.75,328008.25,328334.7812999999,325863.25,323243.00009999983,317246.9325000001,317172.6023000004,315545.9307000004,316390.54169999994,317400.88790000044,317755.10730000027,316833.85199999996,312955.0220999997,306496.17119999975,315563.49430000037,326484.5647999998,333898.9912999999,340972.5741999997,345218.3970999997,350420.5554999998,354642.6610000003,360661.16810000036,362683.29530000035,367112.08249999955,370044.2095999997,371793.4877000004,374333.7352,374178.86199999973,376955.3459000001,379719.9985999996,382324.21860000025,390891.6020999998,402546.07189999986,409898.09619999956,410242.75850000046,413177.05900000036,414440.2196000004,414185.61259999964,415428.4324000003,419400.4151999997,420961.8677000003,420173.5761000002,422002.3942999998,422640.3992999997,424351.22750000004,426006.70040000044,425518.09300000034,427380.9386999998,426683.34779999964,428437.3574999999,425603.63989999983,423615.6331000002,423207.6842,421080.6058,418943.2070000004,419379.3792000003,417684.55599999987,419805.4298999999,419214.9642000003,414903.142,416789.5776000004,414606.7600999996,415776.66860000044,418041.5979000004,421493.60390000045,425652.53000000026,434002.9500000002,435704.91000000015,434612.8200000003,439082.46999999974,437676.4199999999,440907.5599999996,444614.78000000026,444943.25,448071.5499999998,450086.7000000002,456828.7400000002,459658.8233000003,462428.1699999999,464679.8300000001,466414.8200000003,469142.7000000002,468873.0800000001,465953.1327999998,466486.0524000004,469607.9364,472521.20859999955,473602.83050000016,480933.09190000035,486679.36280000024,489584.3128000004,492588.53839999996,494293.33779999986,497464.4693,497834.1456000004,501997.18730000034,506769.4031999996,507512.1787999999,509332.8057000004,513227.3306999998,513802.4907999998,516435.51580000017,518292.6481999997,530997.4819999998,533926.3827999998,541025.4358000001,543267.0017999997,544805.2951999996,546252.8733000001,544924.2763,548478.9008999998,549514.0597000001,550437.7012999998,553474.1036,554502.983,556987.8279999997,553873.2829999998,553647.4768000003,550787.0943999998,550581.6063999999,554324.2188999997,553141.2884,556563.6392000001,562508.0603999998,564891.9123,569964.5343000004,577986.8937999997,579450.0513000004,580415.9822000004,581561.5700000003,582720.6447000001,584109.9982000003,588185.2801000001,593349.5690000001,595448.1112000002,597617.4134,597413.9496999998,598499.1024000002,598995.2136000004,601800.7916000001,601113.0302999998,603664.5162000004,600891.0064000003,601937.2732999995,598967.1782999998,600185.1914999997,606027.0187999997,607120.8108999999,610087.2072000001,611237.9252000004,616606.6233000001,615992.2877000002,614126.8941000002,616334.5464000003,613575.3173000002,610616.8987999996,611348.5875000004,609576.4127000002,601001.5597999999,599623.9604000002,601166.2637999998,601518.4889000002,603537.8095000004,603268.1868000003,604229.2105999999,605955.1688999999,605544.1096000001,603883.1100000003,606227.6840000004,608872.5902000004,613952.2111,611572.7244999995,612024.7087000003,613961.6194000002,614425.8963000001,618862.9945,619072.5307999998,622301.2396,627059.25,632105.8048,632926.3289000001,635073.9983999999,635408.8291999996,641300.7843000004,643279.5290999999,642884.04,645032.2740000002,642246.5175000001,644198.9890999999,646805.6360999998,650076.4304,652784.7992000002,654510.6715000002,656945.3402000004,660371.8353000004,661913.6196999997,670061.7759999996,670588.7982000001,672357.3004999999,670282.2510000002,673689.6979999999,673669.5093999999,680101.1387,679790.3446000004,677179.5199999996,672620.1909999996,669005.2561999997,667055.3483999996,666638.4879000001,665465.8638000004,662706.1687000003,654739.7483000001,656737.7561999997,656863.7938000001,661814.6443999996,660632.2363,661999.4049000004,660788.0991000002,661687.1829000004,659429.8687000005,665477.4133000001,665412.1589000002,659197.25,654416.875,649286.75,647554.0313999997,645249.6562999999,642351.2188999997,639637.375,636682.9062999999,632664.04,627767.6799999997,624872.8526999997,623214.5,616038.5099999998,615870.7400000002,613366.7769999998,605038.2813999997,605690.46,603950.1600000001,602622.5312999999,599582.75,597290.5,595408.0899999999,593779.7599999998,593511.3700000001,588942.75,588291.5255000005,587225.1500000004,581711.0689000003,576577.125,572438.7812999999,567791.5542000001,565447.3879000004,560230.2242999999,559911.5904999999,555891.3334999997,556622.2459000004,554670.0181999998],
                            y=[6263556.937999999,5969088.7511,5969088.7511,6263556.937999999,6263556.937999999,6257793.326300001,6256184.4332,6253934.010199999,6253340.577400001,6254582.375,6252066.75,6252499,6249515.25,6249302.375,6245998.5,6243444.84,6239562.875,6236150.976500001,6238385,6237694.400900001,6240337.5,6240826.5,6239152.968800001,6237069.125,6235264.343800001,6235034.781300001,6238191.468800001,6238454.6875,6240645.718800001,6241910.5,6244030.468800001,6245434.25,6243023.5973000005,6243376,6248275.876,6248905.643999999,6247451.6197999995,6244384.537799999,6246624.5,6249672.25,6250179.25,6248952.375,6248473.125,6245182.3276,6241603.875,6243818.218800001,6243358.25,6244611.5,6253012.359999999,6253873.4399999995,6253974,6251025.4396,6249519.375,6248553.25,6249579,6247243.5625,6250769.5,6253998.75,6252384.25,6254242.4375,6253250.5,6255956.75,6255544.918,6256994.9375,6255453.9066,6256418.6876,6255169.7501,6251233.468800001,6249591,6250794.050000001,6244571.031300001,6246032.25,6245197.5087,6242708.125,6242958.25,6237914.875,6234850.6875,6230083.1875,6228846.875,6224438.3125,6219433.5,6220558.7501,6218908.2784,6208225.6054,6202095.119200001,6180809.5798,6180269.943700001,6175531.7095,6159554.4498,6144923.0623,6131496.885199999,6128386.633400001,6126663.844799999,6131883.5898,6119545.077299999,6120790.9976,6118605.660599999,6113269.4343,6111466.634,6108895.781300001,6106901.046800001,6106068.9671,6107424.480599999,6107190.898499999,6103203.722100001,6100435.254899999,6100601.549900001,6103760.328500001,6104579.018100001,6102039.1018,6104718.0451,6099781.6471,6093509.7522,6092885.0452,6094811.401000001,6095395.336100001,6090001.3617,6089521.7228,6087639.35,6088321.468800001,6085935.6536,6086857.554400001,6085189.209100001,6081511.672800001,6080247.4212,6078687.2765,6075881.2848000005,6070662.777000001,6070669.7903,6068619.6291000005,6069007.5787,6066481.4142,6064072.6263999995,6061818.916999999,6058057.505799999,6055649.1368,6050479.481899999,6048233.1555,6044839.225099999,6035976.5877,6034744.7962,6025824.2925,6030995.470000001,6028548.949999999,6027770.24,6025459.699999999,6023067.380000001,6020305.43,6018312.6,6020036.43,6018103.34,6017132.18,6014025.26,6012934.49,6010372.5922,6004628.0701,6004388.41,6001892.699999999,5992141.859999999,5988281.970000001,5984622.2411,5982023.607899999,5978343.2029,5978425.872400001,5976986.717499999,5978020.341399999,5976986.717499999,5979820.132300001,5978491.743100001,5981348.659,5979661.562999999,5976986.717499999,5976986.717499999,5978104.0704,5980052.7337,5979591.0681,5981399.8451000005,5979148.7925,5979503.1598000005,5976986.717499999,5976986.717499999,5981105.861199999,5986069.3673,5985538.933700001,5986921.4781,5986046.9977,5980719.6829,5981186.725099999,5984905.293299999,5983883.350500001,5984602.1565000005,5988064.5831,5988559.1976,5989865.804099999,5992694.2644,5996555.0967,5998107.912799999,5999783.3367,6001145.588400001,6001421.5611000005,6004289.817299999,6001214.6197999995,6000119.343699999,6009082.975199999,6014161.489600001,6014729.634,6013383.5173,6016101.7765,6014612.9976,6014941.637800001,6018563.899900001,6017961.1468,6019164.8124,6020228.555299999,6020039.441199999,6017047.5385,6016433.064099999,6015401.9935,6011717.4443,6011167.1545,6008015.8868,6006516.7608,6003170.0649,6001891.8225,6000166.4684999995,6001688.3529,6004859.4002,6003392.2476,6008387.452099999,6010829.1138,6012676.304199999,6016521.3861,6017269.679099999,6019110.4385,6021548.4628,6020884.180600001,6023454.1633,6023936.5162,6026555.2765999995,6027662.4419,6030559.376700001,6030021.2183,6033070.836100001,6036591.3386,6037187.6975,6038545.595000001,6045717.6829,6050349.434,6062081.5002,6076820.083900001,6077783.618899999,6081561.9147,6086071.704299999,6089532.9486,6090041.5295,6093126.125,6091458.0166,6094656.7488,6094925.031400001,6096786.671499999,6097954.101399999,6102803.7519000005,6105482.6875,6107004.510500001,6110035.389900001,6111852.7294,6112366.0699000005,6115301.3641,6113532.895300001,6114336.780300001,6113086.1873,6116815.4855,6114898.941,6116622.6118,6118248.1609000005,6118483.957699999,6121245.0261,6123409.428300001,6126699.838199999,6131453.1219999995,6133823.9298,6135313.2809999995,6135197.6884,6136968.6724,6134999.340399999,6136429.201300001,6134679.1117,6134540.5449,6137448.418199999,6138498.1515999995,6139989.488600001,6142259.1193,6147862.735400001,6147754.7688,6149109.7116,6150566.134299999,6155663.8037,6162093.0572,6174911.0370000005,6174253.25,6177367.6251,6177529.781400001,6181146,6181118.218800001,6183795.656400001,6191559.5625,6194840.125,6195935.15,6204116.8100000005,6204990.5901,6207029,6208854.5,6211387.289999999,6214909.115,6218241.625,6221922.65,6225222.5600000005,6223568.1875,6223439.1875,6223994.91,6226797.609999999,6226057.460000001,6224431.76,6225430.8125,6224369.818,6225821.8100000005,6224230.397399999,6229403.4375,6227296.625,6228569.4683,6237410.3069,6242278.349300001,6248401.2179000005,6253631.665899999,6256777.9397,6257793.326300001],
                            fill="toself",line=dict(width = 2, color = "#FFFFFF"), fillcolor="#111111",)
    return LTU_broder



def create_weather_stations_GO(df):
    weather_stations = go.Scatter(
        name = 'Weather stations',
        x=df["lat_LKS94"],
        y=df["long_LKS94"],
        mode='markers+text',
        text=df["station_name"],
        textfont_size=7,
        textfont=dict(
            color=["#09BB8C"]),
        textposition="top center"
    )
    return weather_stations




def create_air_temp_plot(df, LTU_broder_GO, weather_stations_GO):
    print('---------- air temperature -----------')
    fig = go.Figure(data=go.Contour(
        name = 'air temperature, C',
        z=df['air_temp_C'],
        x=df["lat_LKS94"],
        y=df["long_LKS94"],
        colorscale=[[0.0, "rgb(49,54,149)"],
                    [0.1111111111111111, "rgb(69,117,180)"],
                    [0.2222222222222222, "rgb(116,173,209)"],
                    [0.3333333333333333, "rgb(171,217,233)"],
                    [0.4444444444444444, "rgb(224,243,248)"],
                    [0.5555555555555556, "rgb(254,224,144)"],
                    [0.6666666666666666, "rgb(253,174,97)"],
                    [0.7777777777777778, "rgb(244,109,67)"],
                    [0.8888888888888888, "rgb(215,48,39)"],
                    [1.0, "rgb(165,0,38)"]],
        contours=dict(
                start=-30,
                end=30,
                size=1,
            ),
        colorbar=dict(
            title='air temperature, C',
            titleside='right',
            thickness=25,
                thicknessmode='pixels',
                len=0.8,
                lenmode='fraction',
                outlinewidth=0,
            titlefont=dict(
                size=14,
                family='Arial, sans-serif'
            )
        )
    ))
    
    fig.update_layout(
        template='plotly_dark',
        autosize=False, width=1300,height=1000,
        yaxis_visible=True, yaxis_showticklabels=False,
        xaxis_visible=True, xaxis_showticklabels=False)
    fig.add_trace(LTU_broder_GO)
    fig.add_trace(weather_stations_GO)
    return fig




def create_windspeed_avg_plot(df, LTU_broder_GO, weather_stations_GO):
    print('---------- create wind speed plot-----------')
    fig = go.Figure(data=go.Contour(
        name = 'wind_spd_avg_ms',
        z=df['wind_spd_avg_ms'],
        x=df["lat_LKS94"],
        y=df["long_LKS94"],
        contours=dict(
                start=0,
                end=30,
                size=1,
            ),
        colorbar=dict(
            title='wind speed (average) m/s',
            titleside='right',
            thickness=25,
                thicknessmode='pixels',
                len=0.8,
                lenmode='fraction',
                outlinewidth=0,
            titlefont=dict(
                size=14,
                family='Arial, sans-serif'
            )
        )
    ))

    fig.update_layout(
        template='plotly_dark',
        autosize=False, width=1300,height=1000,
        yaxis_visible=True, yaxis_showticklabels=False,
        xaxis_visible=True, xaxis_showticklabels=False)
    fig.add_trace(LTU_broder_GO)
    fig.add_trace(weather_stations_GO)
    return fig



def create_windspeed_max_plot(df, LTU_broder_GO, weather_stations_GO):
    print('---------- create wind speed plot-----------')
    fig = go.Figure(data=go.Contour(
        name = 'wind_spd_max_ms',
        z=df['wind_spd_max_ms'],
        x=df["lat_LKS94"],
        y=df["long_LKS94"],
        contours=dict(
                start=0,
                end=50,
                size=1,
            ),
        colorbar=dict(
            title='wind speed (gusts) m/s',
            titleside='right',
            thickness=25,
                thicknessmode='pixels',
                len=0.8,
                lenmode='fraction',
                outlinewidth=0,
            titlefont=dict(
                size=14,
                family='Arial, sans-serif'
            )
        )
    ))

    fig.update_layout(
        template='plotly_dark',
        autosize=False, width=1300,height=1000,
        yaxis_visible=True, yaxis_showticklabels=False,
        xaxis_visible=True, xaxis_showticklabels=False)
    fig.add_trace(LTU_broder_GO)
    fig.add_trace(weather_stations_GO)
    return fig





def create_prcp_amount_plot(df, LTU_broder_GO, weather_stations_GO):
    print('---------- prcp_amount_mm-----------')
    fig = go.Figure(data=go.Contour(
        name = 'prcp_amount_mm',
        z=df['prcp_amount_mm'],
        x=df["lat_LKS94"],
        y=df["long_LKS94"],
        contours=dict(
                start=0,
                end=30,
                size=1,
            ),
        colorbar=dict(
            title='prcp_amount_mm',
            titleside='right',
            thickness=25,
                thicknessmode='pixels',
                len=0.8,
                lenmode='fraction',
                outlinewidth=0,
            titlefont=dict(
                size=14,
                family='Arial, sans-serif'
            )
        )
    ))

    fig.update_layout(
        template='plotly_dark',
        autosize=False, width=1300,height=1000,
        yaxis_visible=True, yaxis_showticklabels=False,
        xaxis_visible=True, xaxis_showticklabels=False)
    fig.add_trace(LTU_broder_GO)
    fig.add_trace(weather_stations_GO)
    return fig



def create_webpage(figure_list):
    import os
    os.remove("./weather_report.html")
    for figure in figure_list:
        with open('./weather_report.html', 'a') as f:
            f.write(figure.to_html(full_html=False, include_plotlyjs='cdn'))



def save_webpage():
    import webbrowser
    url = 'C://Users//Ve//Documents//GitHub//eismoinfo-weather//weather_report.html'
    webbrowser.open(url, new=2)  # open in new tab



print("############################## PROCESS ##############################")

#SETUP
date = '2021-10-08'
start_time = '07:00'
end_time = '07:15'

weather_data = get_weather_data()

LTU_broder_GO = create_Lithuania_border_GO()
weather_stations_GO = create_weather_stations_GO(weather_data)

fig_air_temp_C = create_air_temp_plot(weather_data, LTU_broder_GO, weather_stations_GO)
fig_wind_spd_avg_ms = create_windspeed_avg_plot(weather_data, LTU_broder_GO, weather_stations_GO)
fig_wind_spd_max_ms = create_windspeed_max_plot(weather_data, LTU_broder_GO, weather_stations_GO)
fig_prcp_amount_mm = create_prcp_amount_plot(weather_data, LTU_broder_GO, weather_stations_GO)

figures = [fig_air_temp_C, fig_wind_spd_avg_ms, fig_prcp_amount_mm]

create_webpage(figures)
save_webpage()

